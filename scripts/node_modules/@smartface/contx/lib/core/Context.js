(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "./constants", "./util/raiseErrorMaybe"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("./constants"), require("./util/raiseErrorMaybe"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.constants, global.raiseErrorMaybe);
    global.Context = mod.exports;
  }
})(this, function (module, exports, _constants, _raiseErrorMaybe) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _raiseErrorMaybe2 = _interopRequireDefault(_raiseErrorMaybe);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Context = function () {
    function Context(actors, reducer) {
      var initialState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var hookFactory = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, Context);

      _initialiseProps.call(this);

      this._hookFactory = hookFactory;
      this.actors = { collection: {}, $$map: [], $$idMap: {}, $$nameMap: {} };
      this.state = Object.assign({}, initialState);
      this._reducer = reducer;
      actors && this.setActors(Object.assign({}, actors));
      this.dispatch({ type: _constants.INIT_CONTEXT_ACTION_TYPE });
    }

    _createClass(Context, [{
      key: "subcribe",
      value: function subcribe(fn) {}
    }]);

    return Context;
  }();

  Context.getID = function () {
    var ID = 1;
    return function () {
      return ++ID;
    };
  }();

  var _initialiseProps = function _initialiseProps() {
    var _this = this;

    this.getReducer = function () {
      return _this._reducer;
    };

    this.setActors = function (actors) {
      Object.keys(actors).forEach(function (name) {
        _this.add(actors[name], name);
      });

      _this.propagateAll();
    };

    this.reduce = function (fn) {
      var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return _this.actors.$$map.reduce(function (acc, name, index) {
        return fn(acc, _this.actors.collection[name], name, index);
      }, acc);
    };

    this.map = function (fn) {
      return _this.actors.$$map.map(function (name, index) {
        return fn(_this.actors.collection[name], name, index);
      });
    };

    this.find = function (name, notValue) {
      return _this.actors.collection[name] || notValue;
    };

    this.addTree = function (tree) {
      Object.keys(tree).forEach(function (name) {
        return _this.add(tree[name], name);
      });
    };

    this.add = function (actor, name) {
      // if(this.actors.collection[name]){
      // raiseErrorMaybe(new Error(`Child's name [${name}] must be unique in the same Container.`), actor.onError);
      // }
      !actor.getID() && actor.setID(Context.getID());
      var instance = actor.getInstanceID();
      //TODO: map by component type
      // const type = actor._actorInternal_.constructor.name;
      // this.actors.$$typeMap[type] ? this.actors.$$typeMap[type].push(id) : this.actors.$$typeMap[name] = [id];

      _this.actors.collection[instance] = actor;
      _this.actors.$$idMap[actor.getID()] = instance;
      _this.actors.$$map.push(instance);
      _this.actors.$$nameMap[name] ? _this.actors.$$nameMap[name].push(actor.getID()) : _this.actors.$$nameMap[name] = [actor.getID()];

      actor.hook = _this._hookFactory;
      actor.componentDidEnter(function (action, target) {
        return _this.dispatch(action, target);
      });

      return name;
    };

    this.removeChildren = function (name) {
      _this.actors.$$map.forEach(function (nm) {
        if (nm.indexOf(name + "_") === 0) {
          var actor = _this.actors.collection[nm];
          actor.componentDidLeave();
          actor.dispose();
          delete _this.actors.collection[nm];
        }
      });

      _this.actors.$$map = Object.keys(_this.actors.collection);
    };

    this.remove = function (name) {
      _this.removeChildren(name);

      var actor = _this.actors.collection[name];

      if (actor) {
        delete _this.actors.collection[name];
        _this.actors.$$map = Object.keys(_this.actors.collection);
        actor.componentDidLeave();
        actor.dispose();
      }
    };

    this.setState = function (state) {
      if (state !== _this.state) {
        var oldState = _this.state;
        _this.state = Object.assign({}, state);
        // this.propagateAll(state, oldState);
      }
    };

    this.propagateAll = function () {
      _this.actors.$$map.map(function (name) {
        var actor = _this.actors.collection[name];
        actor.onContextChange && actor.onContextChange(_this);
      });
    };

    this.getState = function () {
      return Object.assign({}, _this.state);
    };

    this.dispatch = function (action, target) {
      // if(!this.getReducer()){
      //   console.log("Reducer cannot be empty! "+this.getReducer());
      //   return;
      // }

      try {
        var state = _this.getReducer()(_this, action, target);

        _this.setState(state);
      } catch (e) {
        e.message = "An Error is occurred When action [" + action.type + "] run on target [" + target + "]. " + e.message;
        (0, _raiseErrorMaybe2.default)(e, target && !!_this.actors.collection[target] && _this.actors.collection[target].onError);
      }
    };

    this.dispose = function () {
      _this.state = null;
      _this.actors = null;
    };
  };

  exports.default = Context;
  ;
  module.exports = exports["default"];
});