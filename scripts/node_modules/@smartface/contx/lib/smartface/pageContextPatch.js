(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'js-base/core/extend', './pageContext', '../util/patchMethod', "@smartface/styler/lib/buildStyles", "sf-core/application"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('js-base/core/extend'), require('./pageContext'), require('../util/patchMethod'), require("@smartface/styler/lib/buildStyles"), require("sf-core/application"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.extend, global.pageContext, global.patchMethod, global.buildStyles, global.application);
    global.pageContextPatch = mod.exports;
  }
})(this, function (module, exports, _extend, _pageContext, _patchMethod, buildStyles, Application) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = pageContextPatch;

  var _extend2 = _interopRequireDefault(_extend);

  var _pageContext2 = _interopRequireDefault(_pageContext);

  var _patchMethod2 = _interopRequireDefault(_patchMethod);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function onSafeAreaPaddingChange(onSafeAreaPaddingChange, paddings) {
    var style = {};
    paddings.left != undefined && (style.paddingLeft = paddings.left);
    paddings.right != undefined && (style.paddingRight = paddings.right);
    paddings.top != undefined && (style.paddingTop = paddings.top);
    paddings.bottom != undefined && (style.paddingBottom = paddings.bottom);

    onSafeAreaPaddingChange && onSafeAreaPaddingChange.call(this, paddings);

    if (this.ios.safeAreaLayoutMode === true) {
      this.dispatch({
        type: "updatePageSafeArea",
        safeArea: style
      });

      this.layout.applyLayout();
    }
  }

  function onHide(superOnHide) {
    superOnHide && superOnHide();
  }

  function onShow(superOnShow, data) {
    superOnShow && superOnShow(data);

    this.dispatch && this.dispatch({
      type: "invalidate"
    });
    this.dispatch && this.dispatch({
      type: "forceComponentUpdate",
      name: "statusbar"
    });

    this.layout.applyLayout();
  }

  function onOrientationChange(superOnOrientationChange) {
    var _this = this;

    superOnOrientationChange && superOnOrientationChange();

    this.dispatch({
      type: "orientationStarted"
    });

    this.layout.applyLayout();

    // superOnOrientationChange && setTimeout(superOnOrientationChange.bind(this),1);
    setTimeout(function () {
      _this.dispatch({
        type: "orientationEnded"
      });

      _this.layout.applyLayout();
    }, 1);
  }

  function componentDidEnter(componentDidEnter, dispatcher) {
    componentDidEnter && componentDidEnter(dispatcher) || (this.dispatch = dispatcher);
  }

  // monkey patching wrapper for any page.
  function pageContextPatch(page, name) {
    page.onLoad = (0, _patchMethod2.default)(page, "onLoad", onLoad);
    page.onShow = (0, _patchMethod2.default)(page, "onShow", onShow);
    page.onHide = (0, _patchMethod2.default)(page, "onHide", onHide);

    page.componentDidEnter = (0, _patchMethod2.default)(page, "componentDidEnter", componentDidEnter);
    page.onOrientationChange = (0, _patchMethod2.default)(page, "onOrientationChange", onOrientationChange);

    if (page.ios) {
      page.ios.onSafeAreaPaddingChange = onSafeAreaPaddingChange.bind(page, page.ios.onSafeAreaPaddingChange);
    }

    function onLoad(superOnLoad) {
      superOnLoad && superOnLoad();
      this.themeContext = Application.theme((0, _pageContext2.default)(page, name, null, null), name);
    }

    return function pageContextPatchDispose() {
      page.dispatch(null);
      page.dispatch = null;
      page.onLoad = null;
      page.onShow = null;
      page.onHide = null;
      page.onOrientationChange = null;
      page = null;
    };
  };
  module.exports = exports['default'];
});