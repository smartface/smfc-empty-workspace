(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../core/constants", "../core/Context", "@smartface/styler/lib/utils/merge", "@smartface/styler/lib/buildStyles", "@smartface/styler/lib/styler", "../core/Actor"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../core/constants"), require("../core/Context"), require("@smartface/styler/lib/utils/merge"), require("@smartface/styler/lib/buildStyles"), require("@smartface/styler/lib/styler"), require("../core/Actor"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.constants, global.Context, global.merge, global.buildStyles, global.styler, global.Actor);
    global.ThemeContext = mod.exports;
  }
})(this, function (exports, _constants, _Context, _merge, _buildStyles, _styler, _Actor2) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createThemeContextBound = createThemeContextBound;

  var _Context2 = _interopRequireDefault(_Context);

  var _merge2 = _interopRequireDefault(_merge);

  var _buildStyles2 = _interopRequireDefault(_buildStyles);

  var _styler2 = _interopRequireDefault(_styler);

  var _Actor3 = _interopRequireDefault(_Actor2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Theme = function Theme(_ref) {
    var _this = this;

    var name = _ref.name,
        rawStyles = _ref.rawStyles,
        _ref$isDefault = _ref.isDefault,
        isDefault = _ref$isDefault === undefined ? false : _ref$isDefault;

    _classCallCheck(this, Theme);

    this.isDefault = function () {
      return _this._isDefault;
    };

    this.setDefault = function (value) {
      _this._isDefault = value;
      value && !_this.bundle && _this.build();

      return value;
    };

    this.build = function () {
      _this.bundle = (0, _buildStyles2.default)(_this.rawStyles);
    };

    this.asStyler = function () {
      return (0, _styler2.default)(_this.bundle);
    };

    this.name = name;
    this.rawStyles = rawStyles;
    this.setDefault(isDefault);
  };

  var Themeable = function (_Actor) {
    _inherits(Themeable, _Actor);

    function Themeable(pageContext, name) {
      _classCallCheck(this, Themeable);

      var _this2 = _possibleConstructorReturn(this, (Themeable.__proto__ || Object.getPrototypeOf(Themeable)).call(this, pageContext, name));

      _this2.pageContext = pageContext;
      return _this2;
    }

    _createClass(Themeable, [{
      key: "changeStyling",
      value: function changeStyling(styling) {
        this.pageContext(styling);
        this.isDirty = true;
      }
    }]);

    return Themeable;
  }(_Actor3.default);

  /**
   * Theme Context. Returns context bound
   * 
   * @param {Array.<{name:string, rawStyles:Object, isDefault:boolean}>} themes - h List
   * 
   * @returns {function} - Context dispatcher
   */
  function createThemeContextBound(themes) {
    var themesCollection = themes.map(function (theme) {
      return new Theme(theme);
    });

    function themesReducer(context, action, target) {
      var state = context.getState();
      var newState = state;

      switch (action.type) {
        case 'addThemeable':
          // make declarative

          var actor = new Themeable(action.pageContext, action.name);
          context.add(actor, action.name);

          var theme = themesCollection.find(function (theme) {
            return theme.isDefault();
          });
          actor.changeStyling(theme.asStyler());

          break;
        case 'removeThemeable':
          context.remove(action.name);
          break;
        case 'changeTheme':
          // const current = themesCollection.find(theme => theme.isDefault());
          // context.map((actor) => {
          //   actor.changeStyling(current.asStyler());
          // });

          themesCollection.forEach(function (theme) {
            if (theme.name === action.theme) {
              theme.setDefault(true);
              context.map(function (actor) {
                actor.changeStyling(theme.asStyler());
              });
            } else {
              theme.setDefault(false);
            }
          });

          return _extends({}, state, {
            theme: action.theme
          });
        default:
          return newState;
      }
    }

    var themeContext = new _Context2.default(
    // creates themes actors
    {}, themesReducer,
    // initial state
    { theme: themesCollection.find(function (theme) {
        return theme.isDefault === true;
      }) });

    return function (pageContext, name) {
      pageContext === null ? themeContext.dispose() : pageContext !== undefined && themeContext.dispatch({
        type: "addThemeable",
        name: name,
        pageContext: pageContext
      });

      return function themeContextDispatch(action) {
        if (action === null) {
          name && themeContext.dispatch({
            type: "removeThemeable",
            name: name
          });
        } else {
          themeContext.dispatch(action);
        }
      };
    };
  }
});